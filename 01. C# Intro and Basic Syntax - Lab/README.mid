Welcome file
Welcome file

# Lab: C# Intro and Basic Syntax

Problems for exercises and homework for the [“Programming Fundamentals Extended” course @ SoftUni](https://softuni.bg/courses/programming-fundamentals).

## <!\[if !supportLists\]>Problem 1. <!\[endif\]>Greeting

Write a program, which **greets** the user by their **name**, which it **reads** from the **console**.

### <!\[if !supportLists\]>Step 1. <!\[endif\]>Create a New C# Project, using Visual Studio

Open **Visual Studio** and create a new project by going into **\[File** **à New** **à Project\]**:

After that, the project creation window will open.

Select **Visual C#**, then **Console Application** and name it appropriately:

### <!\[if !supportLists\]>Step 2. <!\[endif\]>Write the Program Logic

A new file opens in the editor, which looks like this:

Let’s write the program logic. We want to **read** a name and then **print** that name with some additional text on the **console**. To accomplish this, we’ll use Console.ReadLine() and Console.WriteLine():

### <!\[if !supportLists\]>Step 3. <!\[endif\]>Test the Program

After we wrote the program logic, we can **start** our program, using \[Ctrl+F5\]:

Let’s **type in** a name and see if it works:

If you followed all the steps correctly, you should be greeted by your program! Submit the code in **Judge** and test if it works correctly.

### Examples

**Input**

**Output**

Pesho

Hello, Pesho!

Ivan

Hello, Ivan!

Merry

Hello, Merry!

## <!\[if !supportLists\]>Problem 2. <!\[endif\]>Add Two Numbers

Write a program, which **reads 2 whole numbers** and **adds** them together. Then, print them in the following format:

<!\[if !supportLists\]>· <!\[endif\]>“a + b = sum”

### <!\[if !supportLists\]>Step 1. <!\[endif\]>Create a New C# Project Inside the Solution

In **Visual Studio**, create a new project in our **current solution** by **right clicking** the **solution** in the **Solution Explorer** and navigating to **\[Add** **à New Project…**\]:

After that, name it appropriately and hit **\[OK\]**:

### <!\[if !supportLists\]>Step 2. <!\[endif\]>Change the Startup Project

Now that you’ve created a new project inside the solution, you need to **set** **the startup project to the currently selected project**, otherwise whenever you hit **\[Ctrl+F5\]**, the **previous problem** will start. So **right click** the **solution** and hit “**Set Startup Projects”**:

è

Now we’re ready to write our logic.

### Examples

**Input**

**Output**

2

5

2 + 5 = 7

1

3

1 + 3 = 4

-3

5

-3 + 5 = 2

## <!\[if !supportLists\]>Problem 3. <!\[endif\]>Employee Data

Write a program to read **data** about an **employee** and print it on the console with the appropriate formatting. The order the input comes in is as such:

<!\[if !supportLists\]>· <!\[endif\]>Name – **no** formatting

<!\[if !supportLists\]>· <!\[endif\]>Age – **no** formatting

<!\[if !supportLists\]>· <!\[endif\]>Employee ID – **8-digit padding** (employee id 356 is 00000356)

<!\[if !supportLists\]>· <!\[endif\]>Monthly Salary – formatted to **2 decimal places** (2345.56789 becomes 2345.56)

### Examples

**Input**

**Output**

Ivan

24

1192

1500.353

Name: Ivan

Age: 24

Employee ID: 00001192

Salary: 1500.35

Peter

30

113236

1738.1112

Name: Peter

Age: 30

Employee ID: 00113236

Salary: 1738.11

Naiden

27

1111222

3560

Name: Naiden

Age: 27

Employee ID: 01111222

Salary: 3560.00

### Hints

<!\[if !supportLists\]>· <!\[endif\]>You can use “D” and “F” to format numbers in C#. You can read more about formatting strings [here](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx).
 
Lab: C# Intro and Basic Syntax
Problems for exercises and homework for the “Programming Fundamentals Extended” course @ SoftUni.

<![if !supportLists]>Problem 1. <![endif]>Greeting
Write a program, which greets the user by their name, which it reads from the console.

<![if !supportLists]>Step 1. <![endif]>Create a New C# Project, using Visual Studio
Open Visual Studio and create a new project by going into [File à New à Project]:

After that, the project creation window will open.

Select Visual C#, then Console Application and name it appropriately:

<![if !supportLists]>Step 2. <![endif]>Write the Program Logic
A new file opens in the editor, which looks like this:

Let’s write the program logic. We want to read a name and then print that name with some additional text on the console. To accomplish this, we’ll use Console.ReadLine() and Console.WriteLine():

<![if !supportLists]>Step 3. <![endif]>Test the Program
After we wrote the program logic, we can start our program, using [Ctrl+F5]:

Let’s type in a name and see if it works:

If you followed all the steps correctly, you should be greeted by your program! Submit the code in Judge and test if it works correctly.

Examples
Input

Output

Pesho

Hello, Pesho!

Ivan

Hello, Ivan!

Merry

Hello, Merry!

<![if !supportLists]>Problem 2. <![endif]>Add Two Numbers
Write a program, which reads 2 whole numbers and adds them together. Then, print them in the following format:

<![if !supportLists]>· <![endif]>“a + b = sum”

<![if !supportLists]>Step 1. <![endif]>Create a New C# Project Inside the Solution
In Visual Studio, create a new project in our current solution by right clicking the solution in the Solution Explorer and navigating to [Add à New Project…]:

After that, name it appropriately and hit [OK]:

<![if !supportLists]>Step 2. <![endif]>Change the Startup Project
Now that you’ve created a new project inside the solution, you need to set the startup project to the currently selected project, otherwise whenever you hit [Ctrl+F5], the previous problem will start. So right click the solution and hit “Set Startup Projects”:

è

Now we’re ready to write our logic.

Examples
Input

Output

2

5

2 + 5 = 7

1

3

1 + 3 = 4

-3

5

-3 + 5 = 2

<![if !supportLists]>Problem 3. <![endif]>Employee Data
Write a program to read data about an employee and print it on the console with the appropriate formatting. The order the input comes in is as such:

<![if !supportLists]>· <![endif]>Name – no formatting

<![if !supportLists]>· <![endif]>Age – no formatting

<![if !supportLists]>· <![endif]>Employee ID – 8-digit padding (employee id 356 is 00000356)

<![if !supportLists]>· <![endif]>Monthly Salary – formatted to 2 decimal places (2345.56789 becomes 2345.56)

Examples
Input

Output

Ivan

24

1192

1500.353

Name: Ivan

Age: 24

Employee ID: 00001192

Salary: 1500.35

Peter

30

113236

1738.1112

Name: Peter

Age: 30

Employee ID: 00113236

Salary: 1738.11

Naiden

27

1111222

3560

Name: Naiden

Age: 27

Employee ID: 01111222

Salary: 3560.00

Hints
<![if !supportLists]>· <![endif]>You can use “D” and “F” to format numbers in C#. You can read more about formatting strings here.

Markdown 3611 bytes 505 words 162 lines Ln 2, Col 0 HTML 2622 characters 492 words 81 paragraphs
